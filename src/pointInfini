import numpy as np
import matplotlib.pyplot as plt
from pygame import Vector3
from neurovec3D import NeuroVector3D
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D




class pointFixe:

    
    def __init__(self, res, type):
        
        self.type = type
        if type == 'r': #rectiligne
            self.proie = Vector3(20, 0, 0)
            
        elif type == 'h': #helicoidale
            self.z = np.linspace(2*np.pi, -2*np.pi, 2000)
            self.x = np.cos(self.z)
            self.y = np.sin(self.z)
            self.proie = Vector3(self.x[0],self.y[0],self.z[0])
      
        
        self.res = res
        self.pred = Vector3(0, 0, 0)

        self._lambda = 1
     
        self.a_pred = [self.pred]
        self.a_proie = [self.proie]

        self.ref = self.proie - self.pred

        self.t = 1

    def update(self):

        ref = self.ref * self._lambda
        rp = self.proie - self.pred

        n_ref = NeuroVector3D.fromCartesianVector(ref.x, ref.y, ref.z, self.res)
        n_rp = NeuroVector3D.fromCartesianVector(rp.x, rp.y, rp.z, self.res)

        dt = Vector3((n_rp - n_ref).extractCartesianParameters())
        
        self.pred = self.pred + dt
        self._lambda -= 0.0054 * self._lambda

        if self.type == 'r':
            self.proie = self.proie + Vector3(0, 0.1, 0.1)
        elif self.type == 'h' :
            self.proie = Vector3(self.x[self.t], self.y[self.t], self.z[self.t])

        self.a_pred.append(self.pred)
        self.a_proie.append(self.proie)
       
        self.t += 1

        

    def draw(self, g1, g2):

        mpl.rcParams['legend.fontsize'] = 10
        fig = plt.figure(figsize=(8,8))
        ax = fig.add_subplot(111, projection='3d')

        ax.scatter(g2[0][0], g2[1][0], g2[2][0])
        ax.scatter(g1[0][0], g1[1][0], g1[2][0])
    
        ax.plot(g1[0], g1[1], g1[2], label='proie')
        ax.plot(g2[0], g2[1], g2[2], label='predateur ')
       
        ax.legend()

        plt.show()

c = pointFixe(10, 'h')

#while (c.pred-c.proie).length() > 0.01:
for i in range(1000):
    c.update()

x = [i[0] for i in c.a_proie]
y = [i[1] for i in c.a_proie]
z = [i[2] for i in c.a_proie]

x1 = [i[0] for i in c.a_pred]
y1 = [i[1] for i in c.a_pred]
z1 = [i[2] for i in c.a_pred]

c.draw([x,y,z], [x1,y1,z1])